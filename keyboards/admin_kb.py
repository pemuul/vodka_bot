from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
import math

from keys import SPLITTER_STR
from keyboards.callback_data_classes import AdminCommandCallbackFactory, AdminMenuEditCallbackFactory, AdminMoveMenuCallbackFactory, AdminDeleteCallbackFactory, AdminFillWallet
from sql_mgt import get_admins, get_wallet_data
from heandlers.web_market import get_market_button, get_market_button_setup


global_objects = None

def init_object(global_objects_inp):
    global global_objects

    global_objects = global_objects_inp


def edit_menu_kb(message, path) -> ReplyKeyboardMarkup:
    tree_item = global_objects.tree_data.get_obj_from_path(path)
    next_layers = tree_item.next_layers
    next_buttons = list(next_layers.keys())

    buttons = InlineKeyboardBuilder()
    for button in next_buttons:
        next_item = next_layers.get(button)
        path_id = global_objects.tree_data.get_path_to_id(next_item.path)
        #next_item.path = ''

        buttons.button(text=button, callback_data=f"b_{path_id}")
        #buttons.button(text='üñä –ò–∑–º–µ–Ω–∏—Ç—å', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='EDIT'))
    
    if tree_item.path == SPLITTER_STR:
        if global_objects.settings_bot.get('site').get('site_on'):
            buttons.add(get_market_button())
            buttons.add(get_market_button_setup())

    path_id = global_objects.tree_data.get_path_to_id(tree_item.path)
    buttons.button(text='üîª ‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ  <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='EDIT'))

    if tree_item.path != SPLITTER_STR:
        previus_path = SPLITTER_STR.join(tree_item.path.split(SPLITTER_STR)[:-1])
        if not previus_path:
            previus_path = SPLITTER_STR
        #print(previus_path)
        path_id = global_objects.tree_data.get_path_to_id(previus_path)
        buttons.button(
            text=f'–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=f"b_{path_id}"
        )
        
    if tree_item.path == SPLITTER_STR and message.chat.id in global_objects.admin_list:
        #buttons.button(text='>> –í–µ—Ä–Ω—É—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω—Ç—è <üîë<', callback_data='defolt_data')

        #buttons.button(text='>> –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–∞–≤–∫—É <üîë<', callback_data='return_data')
        buttons.button(text=f'üîª –ê–¥–º–∏–Ω—É <üîë', callback_data=f"admin_help")

        wallet_balance = 0
        wallet_data = get_wallet_data()
        if wallet_data != None:
            wallet_balance = wallet_data.get('balance', 0)
        buttons.button(text=f'üîª üí∞ –ö–æ—à–µ–ª—ë–∫: {wallet_balance} —Ä—É–± <üîë', callback_data='admin_wallet')

        buttons.button(text='‚≠ïÔ∏è üîí –û—Ç–∫–ª—é—á–∏—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å <üîë', callback_data='admin_panel_off')
    
    #row_button = [2 for i in range(len(next_buttons))]
    #row_button.append(1)

    buttons.adjust(1)
    return buttons.as_markup()


def item_edit_kb(path_id):
    buttons = InlineKeyboardBuilder()
    is_menu = path_id == 0
    path = global_objects.tree_data.get_id_to_path(int(path_id))
    tree_item = global_objects.tree_data.get_obj_from_path(path)
    is_redirect = tree_item.redirect is not None

    if not is_menu: 
        buttons.button(text='üîπ üñä –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='RENAME'))
    
    if not is_redirect: 
        buttons.button(text='üîπ üñä –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='NEW_TEXT'))
    
    if not is_redirect: 
        buttons.button(text='üîπ üñº –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='EDIT_MEDIA'))
    
    if not is_menu: 
        buttons.button(text='üîπ üóë –£–¥–∞–ª–∏—Ç—å <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='DELETE'))
    
    if not is_redirect: 
        buttons.button(text='üîª –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='ADD_ELEMENT_SELECT'))
        buttons.button(text='üîª + –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ... <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='OTHER'))
    buttons.button(text='========================', callback_data='pass')
    buttons.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='RETURN'))

    buttons.adjust(1)
    return buttons.as_markup()


def other_item_edit_kb(path_id):
    buttons = InlineKeyboardBuilder()

    buttons.button(
        text='üîπ üîÉ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ <üîë',
        callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='MOVE_ELEMENT')
    )
    buttons.button(
        text='üîπ üÜî –ò–∑–º–µ–Ω–∏—Ç—å/–î–æ–±–∞–≤–∏—Ç—å id <üîë',
        callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='EDIT_ID')
    )

    buttons.button(text='üîπ ‚Ü©Ô∏è –û—Ç–∫–∞—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='ROLL_BACK_CHANGE'))
    buttons.button(text='üîª –†–∞—Å—Å—ã–ª–∫–∞  <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='MAILINGS'))
    buttons.button(text='========================', callback_data='pass')
    buttons.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='EDIT'))

    buttons.adjust(1)
    return buttons.as_markup()


def mailing_kb(path_id):
    buttons = InlineKeyboardBuilder()

    buttons.button(text='üîπ –û—Ç—Ä–∞–≤–∏—Ç—å –±–ª–æ–∫ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º <üîë', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='SEND_MAILING'))
    buttons.button(text='========================', callback_data='pass')
    buttons.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='OTHER'))

    buttons.adjust(1)
    return buttons.as_markup()


def cancel_kb(path_id):
    buttons = InlineKeyboardBuilder()

    buttons.button(text='>> –û–¢–ú–ï–ù–ê <<', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='EDIT'))

    buttons.adjust(1)
    return buttons.as_markup()


def select_new_element(path_id):
    buttons = InlineKeyboardBuilder()

    buttons.button(text='üîπ –ü—Ä–æ—Å—Ç–æ —ç–ª–µ–º–µ–Ω—Ç', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='ADD_ELEMENT'))
    buttons.button(text='üîπ –°—Å—ã–ª–∫–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='ADD_REDIRECT'))
    buttons.button(text='>> –û–¢–ú–ï–ù–ê <<', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='EDIT'))

    buttons.adjust(1)
    return buttons.as_markup()


def import_media_kb(path_id, is_dowland:bool=True):
    buttons = InlineKeyboardBuilder()

    if is_dowland:
        buttons.button(text='üîπ –ó–∞–≥—Ä—É–∑–∏—Ç—å', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='IMPORT_MEDIA'))
    buttons.button(text='>> –û–¢–ú–ï–ù–ê <<', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='EDIT'))
    buttons.button(text='üîπ –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='DELETE_MEDIA'))

    button_pos = [1]
    if is_dowland:
        button_pos = [2, 1]
    buttons.adjust(*button_pos)
    return buttons.as_markup()


def move_item_kb(path_id):
    path = global_objects.tree_data.get_id_to_path(int(path_id))
    tree_item = global_objects.tree_data.get_obj_from_path(path)
    next_layers = tree_item.next_layers
    next_buttons = list(next_layers.keys())

    buttons = InlineKeyboardBuilder()

    for button_id, button in enumerate(next_buttons):
        next_item = next_layers.get(button)
        path_id_move = global_objects.tree_data.get_path_to_id(next_item.path)
        #next_item.path = ''
        
        buttons.button(text=button, callback_data="pass") 
        if button_id > 0:
            buttons.button(text='–≤–≤–µ—Ä—Ö ‚¨ÜÔ∏è', callback_data=AdminMoveMenuCallbackFactory(path_id=path_id, path_id_move=path_id_move, direction='up')) 
        if button_id != len(next_buttons) - 1:
            buttons.button(text='–≤–Ω–∏–∑ ‚¨áÔ∏è', callback_data=AdminMoveMenuCallbackFactory(path_id=path_id, path_id_move=path_id_move, direction='down')) 

    buttons.button(text='========================', callback_data='pass')
    buttons.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=AdminMenuEditCallbackFactory(path_id=path_id, button='EDIT'))

    adjust_list = []
    if len(next_buttons) > 1:
        adjust_list.append(2)

    if len(next_buttons) >= 3:
        adjust_list += [3 for i in range(len(next_buttons) - 2)]

    if len(next_buttons) > 1:
        adjust_list.append(2)

    buttons.adjust(*adjust_list, 1)
    return buttons.as_markup()


def admin_buttons():
    buttons = InlineKeyboardBuilder()

    buttons.button(text='üîπ –ß–∏—Å–ª–æ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏', callback_data=AdminCommandCallbackFactory(command='get_log_click', params='10'))
    buttons.button(text='üîπ –ß–∏—Å–ª–æ –ø–æ—Å–µ—â–µ–Ω–∏–π', callback_data=AdminCommandCallbackFactory(command='get_log_visit', params='10'))
    buttons.button(text='üîπ –î–æ–±–∞–≤–∏—Ç—å –ê–¥–º–∏–Ω–∞', callback_data=AdminMenuEditCallbackFactory(path_id=0, button='ADD_ADMIN'))
    buttons.button(text='üîª –£–¥–∞–ª–∏—Ç—å –ê–¥–º–∏–Ω–∞', callback_data=AdminMenuEditCallbackFactory(path_id=0, button='DELETE_ADMIN'))
    buttons.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=f"b_{0}")

    buttons.adjust(1)
    return buttons.as_markup()


async def delete_admin():
    admins = await get_admins()

    buttons = InlineKeyboardBuilder()

    for admin in admins:
        buttons.button(text=f'{admin[0]} {admin[1]}', callback_data='pass')
        buttons.button(text='üîπ üóë –£–¥–∞–ª–∏—Ç—å', callback_data=AdminDeleteCallbackFactory(user_id=admin[0]))
    buttons.button(text='>> –û–¢–ú–ï–ù–ê <<', callback_data=f"b_{0}")

    adjust_list = [2 for i in range(len(admins))]

    buttons.adjust(*adjust_list, 1)
    return buttons.as_markup()


def wallet_kb():
    buttons = InlineKeyboardBuilder()

    buttons.button(text='üîπ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫', callback_data='fill_wallet')
    buttons.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data=f"b_{0}")

    buttons.adjust(1)
    return buttons.as_markup()


def fill_wallet_kb():
    buttons = InlineKeyboardBuilder()

    for amount in [60, 100, 500, 1000, 3000, 5000]:
        buttons.button(text=f'{amount} —Ä—É–±.', callback_data=AdminFillWallet(amount=amount))
    buttons.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data="admin_wallet")

    buttons.adjust(2)
    return buttons.as_markup()
    

def fill_wallet_alert_message_kb(need_money:float):
    buttons = InlineKeyboardBuilder()

    need_money = math.ceil(need_money)
    if need_money < 60:
        need_money = 60 # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –æ–ø–ª–∞—Ç—É –¢–ì

    buttons.button(text=f'üîπ –ü–æ–ø–æ–ª–Ω–∏—Ç—å {need_money} —Ä—É–±.', callback_data=AdminFillWallet(amount=need_money))
    buttons.button(text='üîπ üí∞ –ö–æ—à–µ–ª—ë–∫', callback_data="admin_wallet")
    buttons.button(text='>> –°–ö–†–´–¢–¨ <<', callback_data=f"delete")

    buttons.adjust(1)
    return buttons.as_markup()
